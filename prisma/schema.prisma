// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  userId       String   @id @default(uuid())
  name         String
  email        String   @unique
  image        String?
  password     String
  role         Role     @default(user)
  status       Status   @default(active)
  isVerified   Boolean  @default(false)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shop          Shop?
  orders        Order[]
  reviews       Review[]
  following     Follower[]
  RequestedUser RequestedUser?
}

// Request to update role
model RequestedUser {
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [userId])
  requestedRole Role
  license       String?
  description   String?

  @@id([userId])
}

// Product Model
model Product {
  productId String @id @default(uuid())

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [shopId])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  name        String
  price       Float
  stock       Int
  discount    Float?
  image       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews Review[]

  OrderItem OrderItem[]
}

// Shop Model
model Shop {
  shopId String @id @default(uuid())

  vendorId String @unique
  vendor   User   @relation(fields: [vendorId], references: [userId], onDelete: Cascade)

  shopName    String
  description String?
  logo        String?
  status      Status   @default(active)
  isVerified  Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  Follower Follower[]
}

// Product category Model
model Category {
  categoryId String    @id @default(uuid())
  name       String    @unique
  products   Product[]
}

// Review Model
model Review {
  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  rating    Int // Rating between 1 and 5
  comment   String?
  createdAt DateTime @default(now())

  @@id([productId, userId])
}

// Follower Model
model Follower {
  userId String
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, shopId])
}

// Order Model
model Order {
  orderId     String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String
  totalAmount Float
  status      OrderStatus // Enum: PENDING, PROCESSING, SHIPPED, DELIVERED, COMPLETED, CANCELLED
  paymentId   String?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// OrderItem Model
model OrderItem {
  orderItemId String @id @default(uuid())
  orderId     String
  order       Order  @relation(fields: [orderId], references: [orderId], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  quantity Int
  price    Float
}

enum Status {
  active
  blocked
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  completed
  cancelled
  returned
  refund_requested
  refunded
}

enum Role {
  admin
  vendor
  user
}
